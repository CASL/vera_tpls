# Macro to identify the compiler
MACRO( IDENTIFY_COMPILER )
    # SET the C/C++ compiler
    IF( CMAKE_COMPILE_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX )
        SET( USING_GCC TRUE )
        MESSAGE("Using gcc")
    ELSEIF( MSVC OR MSVC_IDE OR MSVC60 OR MSVC70 OR MSVC71 OR MSVC80 OR CMAKE_COMPILER_2005 OR MSVC90 OR MSVC10 )
        IF( NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows" )
            MESSAGE( FATAL_ERROR "Using microsoft compilers on non-windows system?" )
        ENDIF()
        SET( USING_MICROSOFT TRUE )
        MESSAGE("Using Microsoft")
    ELSEIF( (${CMAKE_C_COMPILER_ID} MATCHES "Intel") OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Intel") ) 
        SET(USING_ICC TRUE)
        MESSAGE("Using icc")
    ELSEIF( ${CMAKE_C_COMPILER_ID} MATCHES "PGI")
        SET(USING_PGCC TRUE)
        MESSAGE("Using pgCC")
    ELSEIF( (${CMAKE_C_COMPILER_ID} MATCHES "CRAY") OR (${CMAKE_C_COMPILER_ID} MATCHES "Cray") )
        SET(USING_CRAY TRUE)
        MESSAGE("Using Cray")
    ELSE()
        SET(USING_DEFAULT TRUE)
        MESSAGE("${CMAKE_C_COMPILER_ID}")
        MESSAGE("Unknown C/C++ compiler, default flags will be used")
    ENDIF()
    # SET the Fortran++ compiler
    IF( CMAKE_COMPILE_IS_GFORTRAN OR (${CMAKE_Fortran_COMPILER_ID} MATCHES "GNU") )
        SET( USING_GFORTRAN TRUE )
        MESSAGE("Using gfortran")
    ELSEIF( (${CMAKE_Fortran_COMPILER_ID} MATCHES "Intel") ) 
        SET(USING_IFORT TRUE)
        MESSAGE("Using ifort")
    ELSEIF( ${CMAKE_Fortran_COMPILER_ID} MATCHES "PGI")
        SET(USING_PGF90 TRUE)
        MESSAGE("Using pgf90")
    ELSE()
        SET(USING_DEFAULT TRUE)
        MESSAGE("${CMAKE_Fortran_COMPILER_ID}")
        MESSAGE("Unknown Fortran compiler, default flags will be used")
    ENDIF()
ENDMACRO()


# Macro to set the compile/link flags
MACRO( SET_COMPILE_FLAGS )
    SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CFLAGS}" )
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXXFLAGS}" )
    SET( CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${FFLAGS}" )
    SET( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${LDFLAGS}" )
    SET( CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} ${LDFLAGS}" )
    IF ( (NOT ENABLE_SHARED) AND (NOT ENABLE_STATIC) ) 
        MESSAGE(FATAL_ERROR "Neither static or shared libraries enabled.  Please set ENABLE_SHARED or ENABLE_STATIC")
    ELSEIF ( ENABLE_SHARED AND ENABLE_STATIC )
        MESSAGE(FATAL_ERROR "Building both static and shared libraries simultaneously is not currently supported")
    ELSEIF ( ENABLE_SHARED ) 
        SET( BUILD_SHARED_LIBS TRUE )
        SET( CMAKE_ARGS "-DBUILD_SHARED_LIBS:BOOL=TRUE" )
        SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" )
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
        SET( CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS}" )
        SET( ENV_LDFLAGS "${CMAKE_SHARED_LINKER_FLAGS}" )
    ELSE()
        SET( BUILD_SHARED_LIBS FALSE )
        SET( CMAKE_ARGS "-DBUILD_SHARED_LIBS:BOOL=FALSE" )
        SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" )
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
        SET( ENV_LDFLAGS "${CMAKE_STATIC_LINKER_FLAGS}" )
    ENDIF()
    SET( ENV_VARS CC=${CMAKE_C_COMPILER} CFLAGS=${CMAKE_C_FLAGS} )
    SET( ENV_VARS ${ENV_VARS} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${CMAKE_CXX_FLAGS} )
    SET( ENV_VARS ${ENV_VARS} FC=${CMAKE_Fortran_COMPILER} FCFLAGS=${CMAKE_Fortran_FLAGS} )
    SET( ENV_VARS ${ENV_VARS} LDFLAGS=${ENV_LDFLAGS} )
    SET( CMAKE_ARGS "${CMAKE_ARGS};-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER};-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}" )
    SET( CMAKE_ARGS "${CMAKE_ARGS};-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER};-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS};" )
    SET( CMAKE_ARGS "${CMAKE_ARGS};-DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER};-DCMAKE_Fortran_FLAGS=${CMAKE_Fortran_FLAGS};" )
    SET( CMAKE_ARGS "${CMAKE_ARGS};-DCMAKE_SHARED_LINKER_FLAGS=${CMAKE_SHARED_LINKER_FLAGS}" )
ENDMACRO()

